import 'package:dio/dio.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:firebase_database/firebase_database.dart';import 'package:flutter/material.dart';import 'package:ionicons/ionicons.dart';import 'package:fl_chart/fl_chart.dart';import '../../../../constants.dart';import '../../../../models/search_results_model.dart';import '../../../../models/stock_data_model.dart';import '../../../../models/stock_prices_model.dart';import '../../../../models/user_data_model.dart';import 'buyStocks/buy_stocks_screen.dart';import 'sellStocksScreen/sell_stocks_screen.dart';import 'package:shimmer/shimmer.dart';import 'package:intl/intl.dart';import 'package:timeago/timeago.dart';class StockDetails extends StatefulWidget {  const StockDetails({    super.key,    required this.stock,    required this.data,    this.units,  });  final SearchResults stock;  final StockData data;  final int? units;  @override  State<StockDetails> createState() => _StockDetailsState();}class _StockDetailsState extends State<StockDetails> {  String url = "";  int? units;  @override  Widget build(BuildContext context) {    units ??= widget.units;    return Scaffold(      appBar: AppBar(        automaticallyImplyLeading: false,        leading: IconButton(          icon: const Icon(Ionicons.arrow_back_outline),          onPressed: () => Navigator.pop(context, units),        ),      ),      body: SingleChildScrollView(        child: Padding(          padding: const EdgeInsets.symmetric(horizontal: 16.0),          child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [            FutureBuilder(future: getUrl(widget.stock.symbol), builder: (context, AsyncSnapshot<String> snap){              if(!snap.hasData || snap.data == ""){                return const SizedBox();              }              url = snap.data!;              return ClipRRect(                borderRadius: BorderRadius.circular(4),                child: Image.network(                  snap.data!,                  width: 36,                  errorBuilder: (_, __, ___) => const SizedBox(),                ),              );            }),            Text(              "${widget.stock.name} (${widget.stock.symbol})",              style: const TextStyle(fontSize: 20, fontWeight: FontWeight.w400),            ),            const SizedBox(height: 16),            if(units != null && units != 0) Text(                "Current Holdings: $units units",                style: const TextStyle(                  fontWeight: FontWeight.w400,                  fontSize: 16,                ),              ),            const SizedBox(height: 16),            Padding(              padding: const EdgeInsets.only(left: 8.0),              child: Text(                '${widget.data.price} ${widget.stock.currency}',                style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),              ),            ),            Padding(              padding: const EdgeInsets.only(left: 8.0),              child: Text(                '${widget.data.change>=0?"+":""}${widget.data.change} ${widget.stock.currency} (${widget.data.changePercent}%)',                style: TextStyle(color: widget.data.change>=0?                const Color(0xFF50C878):                const Color(0xFFFF5733),                ),              ),            ),            const SizedBox(height: 16),            FutureBuilder(              future: getChartData(widget.stock.symbol),              builder: (context, AsyncSnapshot<List<StockPrices>> snapshot) {                if (snapshot.connectionState == ConnectionState.waiting) {                  return AspectRatio(                    aspectRatio: 1,                    child: SizedBox(                      width: double.infinity,                      child: Shimmer.fromColors(                        baseColor: const Color(0xFF212121),                        highlightColor: const Color(0xFF323232),                        child: Card(                          shape: RoundedRectangleBorder(                            borderRadius: BorderRadius.circular(8.0),                            side: const BorderSide(                                width: 1, color: Color(0xFF212429)),                          ),                        ),                      ),                    ),                  );                }                if (!snapshot.hasData || snapshot.data == null || snapshot.data!.isEmpty) {                  return const SizedBox();                }                int i = 0;                return  ClipRRect(                  borderRadius: BorderRadius.circular(16),                  child: AspectRatio(aspectRatio: 1,child: LineChart(                    LineChartData(                      lineTouchData: LineTouchData(                        touchTooltipData: LineTouchTooltipData(                          maxContentWidth: 100,                          tooltipBgColor: widget.data.change>0?                          const Color(0xDD001100):                          const Color(0xDD110000),                          getTooltipItems: (touchedSpots) {                            return touchedSpots.map((LineBarSpot touchedSpot) {                              final textStyle = TextStyle(                                color: touchedSpot.bar.color,                                fontWeight: FontWeight.bold,                                fontSize: 14,                              );                              return LineTooltipItem(                                '${format(snapshot.data![touchedSpot.x.toInt()].date)} ${touchedSpot.y.toStringAsFixed(2)} ${widget.stock.currency}',                                textStyle,                              );                            }).toList();                          },                        ),                        handleBuiltInTouches: true,                        getTouchLineStart: (data, index) => 0,                      ),                      backgroundColor: const Color(0xFF212121),                      lineBarsData: [                        LineChartBarData(                          belowBarData: BarAreaData(show: true, gradient: LinearGradient(                              colors: widget.data.change>0?                              [const Color(0x6650C878), const Color(0x4450C878), const Color(0x1150C878), const Color(0x0050C878)]:                            [const Color(0x66d22723), const Color(0x44d22723), const Color(0x11d22723), const Color(0x11d22723)],                            begin: Alignment.topCenter,                            end: Alignment.bottomCenter,                          )),                          spots: snapshot.data!                              .map<FlSpot>((e) => FlSpot(                                  (i++).toDouble(), e.average.toDouble()))                              .toList(),                          isCurved: true,                          barWidth: 2,                          color: widget.data.change>0?                          const Color(0xFF0CD648):                          const Color(0xffd92e2e),                          dotData: const FlDotData(                            show: false,                          ),                        ),                      ],                      titlesData: FlTitlesData(                        leftTitles: AxisTitles(                          sideTitles: SideTitles(                            showTitles: false,                            getTitlesWidget: (val, widget) => SideTitleWidget(                              axisSide: widget.axisSide,                              child: Flexible(                                child: Text(                                  double.parse(widget.formattedValue)                                      .toStringAsFixed(2).toString(),                                  maxLines: 1,                                  overflow: TextOverflow.clip,                                ),                              ),                            ),                            interval: 1,                            reservedSize: 44,                          ),                        ),                        bottomTitles: const AxisTitles(                          sideTitles: SideTitles(showTitles: false),                        ),                        topTitles: const AxisTitles(                          sideTitles: SideTitles(showTitles: false),                        ),                        rightTitles: const AxisTitles(                          sideTitles: SideTitles(showTitles: false),                        ),                      ),                      gridData: const FlGridData(                        drawVerticalLine: false,                        horizontalInterval: 2,                      ),                    ),                  )),                );              },            ),            const SizedBox(height: 32),            Row(mainAxisAlignment: MainAxisAlignment.spaceBetween,children: [              if(widget.data.low != null && widget.data.high != null)                Column(children: [                  const Text("Today's high", style: TextStyle(                      color: Color(0xFF8892a6),                      fontSize: 15,                      fontWeight: FontWeight.w300)                  ),                  const SizedBox(height: 8),                  Text(widget.data.high.toString(),                      style: const TextStyle(                          fontSize: 15,                          fontWeight: FontWeight.w300)),                ]),              if(widget.data.low != null && widget.data.high != null)                Column(crossAxisAlignment: CrossAxisAlignment.end,children: [                  const Text("Today's low", style: TextStyle(                      color: Color(0xFF8892a6),                      fontSize: 15,                      fontWeight: FontWeight.w300),                  ),                  const SizedBox(height: 8),                  Text(widget.data.low.toString(), style: const TextStyle(                      fontSize: 15,                      fontWeight: FontWeight.w300)),                ]),            ]),            const SizedBox(height: 16),            Row(mainAxisAlignment: MainAxisAlignment.spaceBetween,children: [              if(widget.data.low52week != null && widget.data.high52week != null)                Column(crossAxisAlignment:CrossAxisAlignment.start,children: [                  const Text("52 Week high", style: TextStyle(                      color: Color(0xFF8892a6),                      fontSize: 15,                      fontWeight: FontWeight.w300),                  ),                  const SizedBox(height: 8),                  Text(widget.data.high52week.toString(), style: const TextStyle(                      fontSize: 15,                      fontWeight: FontWeight.w300)),                ]),              if(widget.data.low52week != null && widget.data.high52week != null)                Column(crossAxisAlignment: CrossAxisAlignment.end,children: [                  const Text("52 Week low",                      style: TextStyle(                          color: Color(0xFF8892a6),                          fontSize: 15,                          fontWeight: FontWeight.w300)),                  const SizedBox(height: 8),                  Text(widget.data.low52week.toString(),                      style: const TextStyle(                          fontSize: 15,                          fontWeight: FontWeight.w300)),                ]),            ]),            const SizedBox(height: 16),            Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [              if(widget.data.open != null)                Column(crossAxisAlignment: CrossAxisAlignment.start,children: [                  const Text("Open price", style: TextStyle(                      color: Color(0xFF8892a6),                      fontSize: 15,                      fontWeight: FontWeight.w300)                  ),                  const SizedBox(height: 8),                  Text(widget.data.open.toString(),                      style: const TextStyle(                          fontSize: 15,                          fontWeight: FontWeight.w300)),                ]),              if(widget.data.prevClose != null)                Column(crossAxisAlignment: CrossAxisAlignment.end,children: [                  const Text("Prev. close", style: TextStyle(                      color: Color(0xFF8892a6),                      fontSize: 15,                      fontWeight: FontWeight.w300)                  ),                  const SizedBox(height: 8),                  Text(widget.data.prevClose.toString(),                      style: const TextStyle(                          fontSize: 15,                          fontWeight: FontWeight.w300)),                ]),            ]),            const SizedBox(height: 32),            Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [              if(widget.data.volume != null)                Column(crossAxisAlignment: CrossAxisAlignment.start,children: [                  const Text("Volume", style: TextStyle(                      color: Color(0xFF8892a6),                      fontSize: 15,                      fontWeight: FontWeight.w300)                  ),                  const SizedBox(height: 8),                  Text(widget.data.volume.toString(),                      style: const TextStyle(                          fontSize: 15,                          fontWeight: FontWeight.w300)),                ]),              if(widget.data.marketCap != null)                Column(crossAxisAlignment: CrossAxisAlignment.center,children: [                  const Text("Market cap", style: TextStyle(                      color: Color(0xFF8892a6),                      fontSize: 15,                      fontWeight: FontWeight.w300)                  ),                  const SizedBox(height: 8),                  Text(NumberFormat.decimalPattern('en').format(widget.data.marketCap).toString(),                      style: const TextStyle(                          fontSize: 15,                          fontWeight: FontWeight.w300)),                ]),              if(widget.data.peRatio != null)                Column(crossAxisAlignment: CrossAxisAlignment.end,children: [                  const Text("P/E ratio", style: TextStyle(                      color: Color(0xFF8892a6),                      fontSize: 15,                      fontWeight: FontWeight.w300)                  ),                  const SizedBox(height: 8),                  Text(widget.data.peRatio.toString(),                      style: const TextStyle(                          fontSize: 15,                          fontWeight: FontWeight.w300)),                ]),            ]),            const SizedBox(height: 80),          ]),        ),      ),      bottomSheet: Container(        color: const Color(0xFF212223),        child: Padding(          padding: const EdgeInsets.all(8.0),          child: Row(mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [            FilledButton(              onPressed: () async {                int y = await buyStocks(url, context);                if(mounted) {                  setState(() => units = y);                }              },              style: FilledButton.styleFrom(                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),                backgroundColor: const Color(0xFF40B868),                fixedSize: Size(MediaQuery.of(context).size.width/2-32, 48),              ),              child: Text(                "Buy",                style: TextStyle(fontSize: 20, color: Theme.of(context).colorScheme.onSurface),              ),            ),            FilledButton(              onPressed: () async {                int y = await sellStocks(url, context);                if (mounted) {                  setState(() => units = y);                }              },              style: FilledButton.styleFrom(                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),                backgroundColor: const Color(0xFFEF4723),                fixedSize: Size(MediaQuery.of(context).size.width/2-32, 48),              ),              child: Text(                "Sell",                style: TextStyle(fontSize: 20, color: Theme.of(context).colorScheme.onSurface),              ),            ),          ]),        ),      ),    );  }  Future<String> getUrl(String symbol) async {    Response response = await Dio().get("https://api.iex.cloud/v1/stock/$symbol/logo?token=$stocksApiKey");    String url = response.data["url"]??"";    return url;  }  Future<List<StockPrices>> getChartData(String symbol) async {    Response response = await Dio().get("https://api.iex.cloud/v1/data/core/intraday_prices/$symbol?filter=average,date,label&range=1d&token=$stocksApiKey");    List<StockPrices> prices = (response.data as List).map((e) => StockPrices.fromMap(e))    .where((element) => element.average != null).toList();    return prices;  }  buyStocks(String url, BuildContext context) async {    DataSnapshot snapshot = await FirebaseDatabase.instance.ref().child(FirebaseAuth.instance.currentUser!.uid).get();    UserData userData = UserData.fromSnapshot(snapshot);    if(mounted){      int? result = await Navigator.push(context, MaterialPageRoute(builder: (context) =>          BuyStocksScreen(            url: url,            userData: userData,            stockPrice: getPrice(widget.data.price, widget.stock.currency),            name: widget.stock.name,            symbol: widget.stock.symbol,            currency: widget.stock.currency,          )      ));      if(result != null){        return result;      }      return units;    }  }  sellStocks(String url, BuildContext context) async {    DataSnapshot snapshot = await FirebaseDatabase.instance.ref().child(FirebaseAuth.instance.currentUser!.uid).get();    UserData userData = UserData.fromSnapshot(snapshot);    if(mounted && (userData.stocks.where((e) => e.symbol == widget.stock.symbol).isEmpty ||        userData.stocks.firstWhere((e) => e.symbol == widget.stock.symbol).units == 0)){      ScaffoldMessenger.of(context).showSnackBar(          const SnackBar(            content: Text("You don't have any units to sell.", style: TextStyle(color: Colors.white),),            behavior: SnackBarBehavior.floating,            margin: EdgeInsets.all(8),            backgroundColor: Color(0xFF212121),          )      );      return;    }    if(mounted){      int? result = await Navigator.push(context, MaterialPageRoute(builder: (context) =>          SellStocksScreen(            url: url,            userData: userData,            stockPrice: getPrice(widget.data.price, widget.stock.currency),            name: widget.stock.name,            symbol: widget.stock.symbol,            currency: widget.stock.currency,          )      ));      if(result != null){        return result;      }      return units;    }  }  double getPrice(price, String currency) {    if(currency == "USD"){      if(price.runtimeType == int) {        return price.toDouble();      }      return price;    }    return (price*currencyValues[currency.toLowerCase()]) ?? price;  }  double range(List<double> list) {    list.sort((a,b) => a.compareTo(b));    return (list.last - list.first).toDouble();  }}